

const handler = async (m, {conn, usedPrefix, command, args, isOwner, isAdmin, isROwner}) => {
  const datas = global
  const idioma = datas.db.data.users[m.sender].language
  const _translate = JSON.parse(fs.readFileSync(`./language/${idioma}.json`))
  const tradutor = _translate.plugins.config_funciones


const optionsFull = `_*${tradutor.texto1[0]}*_\n 

${tradutor.texto1[1]}  | –ü–†–ò–í–ï–¢–°–¢–í–ò–ï"
${tradutor.texto1[2]} ${usedPrefix + command} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
${tradutor.texto1[3]}

--------------------------------

${tradutor.texto4[0]} | –ê–ù–¢–ò–°–°–´–õ–ö–ê
${tradutor.texto4[1]} ${usedPrefix + command} –∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞
${tradutor.texto4[2]}
${tradutor.texto4[3]}

--------------------------------

${tradutor.texto5[0]} üîó | –ê–ù–¢–ò–°–°–´–õ–ö–ê 2
${tradutor.texto5[1]}  ${usedPrefix + command} –∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞2
${tradutor.texto5[2]}
${tradutor.texto5[3]}

--------------------------------

${tradutor.texto7[0]} | DETECT 2
${tradutor.texto7[1]} ${usedPrefix + command} detect2
${tradutor.texto7[2]}

--------------------------------

${tradutor.texto8[0]} | –û–ì–†–ê–ù–ò–ß–ò–¢–¨
${tradutor.texto8[1]} ${usedPrefix + command} –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
${tradutor.texto8[2]}
${tradutor.texto8[3]}
--------------------------------

${tradutor.texto9[0]} | –ê–í–¢–û–ß–¢–ï–ù–ò–ï
${tradutor.texto9[1]} ${usedPrefix + command} –∞–≤—Ç–æ—á—Ç–µ–Ω–∏–µ
${tradutor.texto9[2]}
${tradutor.texto9[3]}

--------------------------------

${tradutor.texto10[0]} | –ê–£–î–ò–û
${tradutor.texto10[1]} ${usedPrefix + command} –∞—É–¥–∏–æ
${tradutor.texto10[2]}

--------------------------------

${tradutor.texto11[0]} | –ê–í–¢–û–°–¢–ò–ö–ï–†
${tradutor.texto11[1]} ${usedPrefix + command} –∞–≤—Ç–æ—Å—Ç–∏–∫–µ—Ä 
${tradutor.texto11[2]}

--------------------------------

${tradutor.texto18[0]} | –ê–ù–¢–ò–ê–†–ê–ë
${tradutor.texto18[1]} ${usedPrefix + command} –∞–Ω—Ç–∏–∞—Ä–∞–±
${tradutor.texto18[2]}
${tradutor.texto18[3]}

--------------------------------

${tradutor.texto19[0]} | –ê–ù–¢–ò–ê–†–ê–ë 2
${tradutor.texto19[1]}  ${usedPrefix + command} –∞–Ω—Ç–∏–∞—Ä–∞–±2
${tradutor.texto19[2]} 
${tradutor.texto19[3]} 

--------------------------------

${tradutor.texto20[0]} | –¢–û–õ–¨–ö–û-–ê–î–ú–ò–ù
${tradutor.texto20[1]} ${usedPrefix + command} —Ç–æ–ª—å–∫–æ–∞–¥–º–∏–Ω
${tradutor.texto20[2]}

--------------------------------

${tradutor.texto22[0]} | –ê–ù–¢–ò–£–î–ê–õ–ï–ù–ò–ï
${tradutor.texto22[1]} ${usedPrefix + command} –∞–Ω—Ç–∏—É–¥–∞–ª–µ–Ω–∏–µ
${tradutor.texto22[2]}

--------------------------------

${tradutor.texto25[0]} | –ê–ù–¢–ò–°–ü–ê–ú
${tradutor.texto25[1]} ${usedPrefix + command} –∞–Ω—Ç–∏—Å–ø–∞–º
${tradutor.texto25[2]}
${tradutor.texto25[3]}

--------------------------------

${tradutor.texto27[0]} | –ê–ù–¢–ò–õ–ò–ß–ö–ê
${tradutor.texto27[1]} ${usedPrefix + command} –∞–Ω—Ç–∏–ª–∏—á–∫–∞
${tradutor.texto27[2]}
${tradutor.texto27[3]}`.trim();

  const isEnable = /true|–≤–∫–ª—é—á–∏—Ç—å|(turn)?on|1/i.test(command);
  const chat = global.db.data.chats[m.chat];
  const user = global.db.data.users[m.sender];
  const bot = global.db.data.settings[conn.user.jid] || {};
  const type = (args[0] || '').toLowerCase();
  let isAll = false; const isUser = false;
  switch (type) {
    case '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ':
      if (!m.isGroup) {
        if (!isOwner) {
          global.dfail('group', m, conn);
          throw false;
        }
      } else if (!(isAdmin || isOwner || isROwner)) {
        global.dfail('admin', m, conn);
        throw false;
      }
      chat.welcome = isEnable;
      break;
    case 'detect':
      if (!m.isGroup) {
        if (!isOwner) {
          global.dfail('group', m, conn);
          throw false;
        }
      } else if (!isAdmin) {
        global.dfail('admin', m, conn);
        throw false;
      }
      chat.detect = isEnable;
      break;
    case 'detect2':
      if (!m.isGroup) {
        if (!isOwner) {
          global.dfail('group', m, conn);
          throw false;
        }
      } else if (!isAdmin) {
        global.dfail('admin', m, conn);
        throw false;
      }
      chat.detect2 = isEnable;
      break;
    case 'simsimi':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.simi = isEnable;
      break;
    case 'antiporno':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiporno = isEnable;
      break;
    case 'delete':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.delete = isEnable;
      break;
    case '–∞–Ω—Ç–∏—É–¥–∞–ª–µ–Ω–∏–µ':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antidelete = isEnable;
      break;
    case 'public':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['self'] = !isEnable;
      break;
    case '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiLink = isEnable;
      break;
    case '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞2':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiLink2 = isEnable;
      break;
    case 'antiviewonce':
      if (m.isGroup) {
        if (!(isAdmin || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiviewonce = isEnable;
      break;
    case 'modohorny':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.modohorny = isEnable;
      break;
    case '—Ç–æ–ª—å–∫–æ–∞–¥–º–∏–Ω':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.modoadmin = isEnable;
      break;
    case 'autosticker':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.autosticker = isEnable;
      break;
    case '–∞—É–¥–∏–æ':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.audios = isEnable;
      break;
    case '–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.restrict = isEnable;
      break;
    case 'audios_bot':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.audios_bot = isEnable;      
      break;
    case 'modoia':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.modoia = isEnable;      
      break;      
    case 'nyimak':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['nyimak'] = isEnable;
      break;
    case '–∞–≤—Ç–æ—á—Ç–µ–Ω–∏–µ':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      bot.autoread2 = isEnable;
      //global.opts['autoread'] = isEnable;
      break;
    case 'pconly':
    case 'privateonly':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['pconly'] = isEnable;
      break;
    case 'gconly':
    case 'grouponly':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['gconly'] = isEnable;
      break;
    case 'swonly':
    case 'statusonly':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      global.opts['swonly'] = isEnable;
      break;
    case '–∞–Ω—Ç–∏–≤—ã–∑–æ–≤':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.antiCall = isEnable;
      break;
    case '–∞–Ω—Ç–∏–ª–∏—á–∫–∞':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.antiPrivate = isEnable;
      break;
    case 'modejadibot':
      isAll = true;
      if (!isROwner) {
        global.dfail('rowner', m, conn);
        throw false;
      }
      bot.modejadibot = isEnable;
      break;
    case '–∞–Ω—Ç–∏—Å–ø–∞–º':
      isAll = true;
      if (!(isROwner || isOwner)) {
        global.dfail('owner', m, conn);
        throw false;
      }
      bot.antispam = isEnable;
      break;
    case '–∞–Ω—Ç–∏–≤–∏—Ä—É—Å':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiToxic = isEnable;
      break;
      case 'game': case 'juegos': case 'fun': case 'ruleta':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.game = isEnable          
break;
    case '–∞–Ω—Ç–∏–∞—Ä–∞–±3':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiTraba = isEnable;
      break;
    case '–∞–Ω—Ç–∏–∞—Ä–∞–±':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn); 
          throw false;
        }
      }
      chat.antiArab = isEnable;
      break;
    case '–∞–Ω—Ç–∏–∞—Ä–∞–±2':
      if (m.isGroup) {
        if (!(isAdmin || isROwner || isOwner)) {
          global.dfail('admin', m, conn);
          throw false;
        }
      }
      chat.antiArab2 = isEnable;
      break;
    default:
      if (!/[01]/.test(command)) return await conn.sendMessage(m.chat, {text: optionsFull}, {quoted: m});
      throw false;
  }
  conn.sendMessage(m.chat, {text: `_*${tradutor.texto28[0]}*_\n\n*${tradutor.texto28[1]}* _${type}_  ${isEnable ? '‚úÖ' : '‚ùé'} *${tradutor.texto28[2]}* ${isAll ? '–±–æ—Ç–∞' : isUser ? '' : '—á–∞—Ç–∞'}`}, {quoted: m});
  //conn.sendMessage(m.chat, {text: `‚ñ¢ *Opci√≥n:* ${type}\n\n‚ñ¢ *Estado:* ${isEnable ? 'Activado' : 'Desactivado'}\n\n‚ñ¢ *Para* ${isAll ? 'este bot' : isUser ? '' : 'este chat'}`}, {quoted: m});
};
handler.command = /^((–≤–∫|–≤—ã–∫)–ª—é—á–∏—Ç—å|(tru|fals)e|(turn)?[01])$/i;
export default handler;
